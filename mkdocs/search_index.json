{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nThis is a python server and web based javascript duo that allows an experiment to be run using an Arduino microcontroller.\n\n\nWeb Interface\n\n\n\n\nThe top section provides an interface to start/stop a trial and plots real-time feedback as the trial is running.\n\n\nThe middle section provides an interface to set stimulus parameters for a trial and to upload these parameters to an Arduino. This section also provides a plot of what the trial will look like based on the set of parameters entered.\n\n\nServer Installation\n\n\nPython\n\n\nDownload and install \nAnaconda\n. Anaconda is a \npython\n installation that will install many commonly used libraries. It is much easier to get started with Anaconda rather than a basic installation of Python.\n\n\nInstall required python libraries\n\n\nInstall additional required python libraries using the included requirements.txt file\n\n\npip install -r requirements.txt\n\n\nHere is the requirements.txt file\n\n\neventlet\n=0.18.4\nFlask\n=0.10.1\nFlask-Markdown\n=0.3\nFlask-SocketIO\n=1.0\nplatformio\n=2.8.5\nplotly\n=1.9.6\npyserial\n=3.0.1\n\n\n\n\nArduino Setup\n\n\nUpload code to the Arduino\n\n\nThe source code for the Arduino can be found in \n/platformio/src/main.cpp\n.\n\n\nUse the standard Arduino IDE to upload main.cpp to your Arduino. Make sure you have the Arduino libraries installed (see below).\n\n\nIf you prefer you can use \nPlatformio\n to do everything from a command line. This has the distinct advantage that you can compile and upload code from a headless computer including a Raspberry Pi or any system running Linux.\n\n\nPlatformio is a python library so you should be good to go with \npip install platformio\n. Have a look \nhere\n to create a platformio.ini file for your specific Arduino.\n\n\nTwo example platformio.ini configurations\n\n\n[env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\n\n[env:pro16MHzatmega328]\nplatform = atmelavr\nframework = arduino\nboard = pro16MHzatmega328\n\n\n\n\nOnce platformio is configured, compile, upload, and clean with\n\n\nplatformio run #compile arduino code\nplatformio run --target upload #compile and upload\nplatformio run --target clean #clean project \n\nplatformio serialports monitor -p /dev/ttyUSB0 -b 115200 #a serial port monitor\n\n\n\n\nSpecifying the correct serial port for the Arduino is critical. Specify this in the treadmill.py file.\n\n\n#serialStr = '/dev/tty.usbmodem618661' #teensy at work\n#serialStr = '/dev/tty.usbmodem618661' #teensy?\n#serialStr = '/dev/ttyUSB0' #hand soldered arduino micro (home debian)\n#serialStr = '/dev/tty.usbserial-A50285BI' # hand soldered at work\nserialStr = '/dev/ttyACM0' #uno\n\n\n\n\nHardware\n\n\n\n\n\n\nArduino Uno\n\n\n\n\n\n\nStepper Motor, \nSparkfun - 09238\n, $15\n\n\n\n\n\n\nStepper motor driver, EasyDriver, \nSparkfun - 12779\n, $15. Main website for \nEasyDriver\n\n\n\n\n\n\nRotary encoder, \nHoneywell-600-128-CBL\n, \n.pdf\n spec sheet, $37\n\n\n\n\n\n\nIR LED, 840-850 nm, \nSparkfun - 9469\n $1 each (960 nm IR LEDs do not work well with Pi Noir camera)\n\n\n\n\n\n\nActobotics at \nServoCity\n and \nSparkfun\n. Give \nServoCity\n a shot, their visual guides and project ideas are really helpful in desining components. This can be your one stop shop for all structural components including frames, rods, bearings, clamps, and motor mounts.\n\n\n\n\n\n\nArduino libraries\n\n\nKey is to use libraries that do not block your main event loop. These are 'non-blocking' and usually written in C.\n\n\n\n\n\n\nAccelStepper\n library to control stepper motor\n\n\n\n\n\n\nRotary encoder library from \nPJRC\n\n\n\n\n\n\nWiring the arduino\n\n\n\n\nWire the stepper motor\n\n\nWire the stepper motor to the stepper motor driver\n\n\nWire the rotary encoder\n\n\nWire the DIO pins to communicate with ScanImage\n\n\n\n\nRunning an experiment\n\n\nAt its core, an experiment is run on the Arduino using \nmain.cpp\n. We have provided two additional interfaces: a flask app that serves a webpage and a backend python interface.\n\n\nFlask interface\n\n\nRunning the flask interface with \npython treadmill_app.py\n will run a flask server and serve a website at \nhttp://192.168.1.200:5000\n. You can change the default web address and port in \ntreadmill_app.py\n.\n\n\nPure Python interface\n\n\nYou can easily use iPython or any python command interpreter to drive an experiment.\n\n\nimport treadmill\nt = treadmill.treadmill() # create a treadmill object\nt.startTrial() # start a new trial\nt.stopTrial() # stop a trial\nt.GetArduinoState() # get the current state with all trial parameters (see Arduino getstate below).\nt.settrial('epochDur',5000) # set the value of 'epochDur' trial parameter to 5000 ms\n\n\n\n\nThe python interface and arduino interface share all trial parameter names. See Arduino section below for a list of all possible trial parameters.\n\n\nArduino interface\n\n\nThe Arduino program \nmain.cpp\n provides a simple serial interface to get and set parameters of a trial and to start and stop a trial. Once the program is uploaded to an Arduino, open your favorite serial port and start entering commands.\n\n\nstartTrial # start a trial\nstopTrial # stop a trial\ngetState # \nsettrial,[name],[value]\n\n\n\n\nsettrial\n takes the \nname\n and \nvalue\n of a trial parameter to set. The \nname\n needs to be one of: numPulse, numEpoch, epochDur, preDur, etc. These names match the 'Stimulus' parameters provided in the web interface. See the SetTrial() function in \nmain.cpp\n for all possible trial parameters.\n\n\nEntering \ngetState\n in a serial window and the Arduino will return the current values for all trial parameters. This is also a good way to find the names of trial parameters and then set them like \nsettrial,epochDur,5000\n.\n\n\n=== Arduino State ===\ntrialNumber=0\ntrialDur=1000\nnumEpoch=1\nepochDur=1000\npreDur=1000\npostDur=1000\nnumPulse=3\npulseDur=1000\nuseMotor=1\nmotorDel=200\nmotorDur=200\nmotorSpeed=0\nmotorMaxSpeed=0\nversionStr=20160322\n=== Done ===\n\n\n\n\nRolling your own interface\n\n\nYou can roll your own interface by either interfacing directly with the Arduino code in \nmain.cpp\n or the python code in \ntreadmill.py\n.\n\n\nLinks\n\n\nFlask\n\n\n\n\n\n\nflask-socketio\n\n\n\n\n\n\nflask-markdown\n\n\n\n\n\n\neventlet\n\n\n\n\n\n\nArduino\n\n\n\n\n\n\nplatormio\n\n\n\n\n\n\nplatform io serial port monitor\n\n\n\n\n\n\nAccelStepper\n\n\n\n\n\n\nRotary Encoder\n\n\n\n\n\n\nDevelopment\n\n\nmkDocs\n\n\nThis documentation is written in markdown and a static site is generated with \nmkDocs\n using the \nCinder\n theme. Previously I have used Jekyll which is amazing. Going with mkDocs to see if a simple site is acceptable.\n\n\nWhen writing markdown, serve a mkDocs site locally with\n\n\ncd docs/\nmkdocs serve --dev-addr=0.0.0.0:8000 # serves built site on LAN IP\nmkdocs serve # serves built site on localhost at 127.0.0.1:8000\n\nmkdocs build #generates the site into docs/site/\n\n\n\n\nDeploy to github gh-pages by follow for \ndeployment instructions\n.\n\n\nmkdocs gh-deploy\n will use the gh-pages branch of repository specified in \nmkdocs.yml\n\n\n# this will deploy to github gh-pages specified in mkdocs.yml\ncd docs #should have mkdocs.yml file\nmkdocs gh-deploy --clean \n\n#site is then available at\nhttp://cudmore.github.io/treadmill", 
            "title": "home"
        }, 
        {
            "location": "/#introduction", 
            "text": "This is a python server and web based javascript duo that allows an experiment to be run using an Arduino microcontroller.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#web-interface", 
            "text": "The top section provides an interface to start/stop a trial and plots real-time feedback as the trial is running.  The middle section provides an interface to set stimulus parameters for a trial and to upload these parameters to an Arduino. This section also provides a plot of what the trial will look like based on the set of parameters entered.", 
            "title": "Web Interface"
        }, 
        {
            "location": "/#server-installation", 
            "text": "", 
            "title": "Server Installation"
        }, 
        {
            "location": "/#python", 
            "text": "Download and install  Anaconda . Anaconda is a  python  installation that will install many commonly used libraries. It is much easier to get started with Anaconda rather than a basic installation of Python.", 
            "title": "Python"
        }, 
        {
            "location": "/#install-required-python-libraries", 
            "text": "Install additional required python libraries using the included requirements.txt file  pip install -r requirements.txt  Here is the requirements.txt file  eventlet =0.18.4\nFlask =0.10.1\nFlask-Markdown =0.3\nFlask-SocketIO =1.0\nplatformio =2.8.5\nplotly =1.9.6\npyserial =3.0.1", 
            "title": "Install required python libraries"
        }, 
        {
            "location": "/#arduino-setup", 
            "text": "", 
            "title": "Arduino Setup"
        }, 
        {
            "location": "/#upload-code-to-the-arduino", 
            "text": "The source code for the Arduino can be found in  /platformio/src/main.cpp .  Use the standard Arduino IDE to upload main.cpp to your Arduino. Make sure you have the Arduino libraries installed (see below).  If you prefer you can use  Platformio  to do everything from a command line. This has the distinct advantage that you can compile and upload code from a headless computer including a Raspberry Pi or any system running Linux.  Platformio is a python library so you should be good to go with  pip install platformio . Have a look  here  to create a platformio.ini file for your specific Arduino.  Two example platformio.ini configurations  [env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\n\n[env:pro16MHzatmega328]\nplatform = atmelavr\nframework = arduino\nboard = pro16MHzatmega328  Once platformio is configured, compile, upload, and clean with  platformio run #compile arduino code\nplatformio run --target upload #compile and upload\nplatformio run --target clean #clean project \n\nplatformio serialports monitor -p /dev/ttyUSB0 -b 115200 #a serial port monitor  Specifying the correct serial port for the Arduino is critical. Specify this in the treadmill.py file.  #serialStr = '/dev/tty.usbmodem618661' #teensy at work\n#serialStr = '/dev/tty.usbmodem618661' #teensy?\n#serialStr = '/dev/ttyUSB0' #hand soldered arduino micro (home debian)\n#serialStr = '/dev/tty.usbserial-A50285BI' # hand soldered at work\nserialStr = '/dev/ttyACM0' #uno", 
            "title": "Upload code to the Arduino"
        }, 
        {
            "location": "/#hardware", 
            "text": "Arduino Uno    Stepper Motor,  Sparkfun - 09238 , $15    Stepper motor driver, EasyDriver,  Sparkfun - 12779 , $15. Main website for  EasyDriver    Rotary encoder,  Honeywell-600-128-CBL ,  .pdf  spec sheet, $37    IR LED, 840-850 nm,  Sparkfun - 9469  $1 each (960 nm IR LEDs do not work well with Pi Noir camera)    Actobotics at  ServoCity  and  Sparkfun . Give  ServoCity  a shot, their visual guides and project ideas are really helpful in desining components. This can be your one stop shop for all structural components including frames, rods, bearings, clamps, and motor mounts.", 
            "title": "Hardware"
        }, 
        {
            "location": "/#arduino-libraries", 
            "text": "Key is to use libraries that do not block your main event loop. These are 'non-blocking' and usually written in C.    AccelStepper  library to control stepper motor    Rotary encoder library from  PJRC", 
            "title": "Arduino libraries"
        }, 
        {
            "location": "/#wiring-the-arduino", 
            "text": "Wire the stepper motor  Wire the stepper motor to the stepper motor driver  Wire the rotary encoder  Wire the DIO pins to communicate with ScanImage", 
            "title": "Wiring the arduino"
        }, 
        {
            "location": "/#running-an-experiment", 
            "text": "At its core, an experiment is run on the Arduino using  main.cpp . We have provided two additional interfaces: a flask app that serves a webpage and a backend python interface.", 
            "title": "Running an experiment"
        }, 
        {
            "location": "/#flask-interface", 
            "text": "Running the flask interface with  python treadmill_app.py  will run a flask server and serve a website at  http://192.168.1.200:5000 . You can change the default web address and port in  treadmill_app.py .", 
            "title": "Flask interface"
        }, 
        {
            "location": "/#pure-python-interface", 
            "text": "You can easily use iPython or any python command interpreter to drive an experiment.  import treadmill\nt = treadmill.treadmill() # create a treadmill object\nt.startTrial() # start a new trial\nt.stopTrial() # stop a trial\nt.GetArduinoState() # get the current state with all trial parameters (see Arduino getstate below).\nt.settrial('epochDur',5000) # set the value of 'epochDur' trial parameter to 5000 ms  The python interface and arduino interface share all trial parameter names. See Arduino section below for a list of all possible trial parameters.", 
            "title": "Pure Python interface"
        }, 
        {
            "location": "/#arduino-interface", 
            "text": "The Arduino program  main.cpp  provides a simple serial interface to get and set parameters of a trial and to start and stop a trial. Once the program is uploaded to an Arduino, open your favorite serial port and start entering commands.  startTrial # start a trial\nstopTrial # stop a trial\ngetState # \nsettrial,[name],[value]  settrial  takes the  name  and  value  of a trial parameter to set. The  name  needs to be one of: numPulse, numEpoch, epochDur, preDur, etc. These names match the 'Stimulus' parameters provided in the web interface. See the SetTrial() function in  main.cpp  for all possible trial parameters.  Entering  getState  in a serial window and the Arduino will return the current values for all trial parameters. This is also a good way to find the names of trial parameters and then set them like  settrial,epochDur,5000 .  === Arduino State ===\ntrialNumber=0\ntrialDur=1000\nnumEpoch=1\nepochDur=1000\npreDur=1000\npostDur=1000\nnumPulse=3\npulseDur=1000\nuseMotor=1\nmotorDel=200\nmotorDur=200\nmotorSpeed=0\nmotorMaxSpeed=0\nversionStr=20160322\n=== Done ===", 
            "title": "Arduino interface"
        }, 
        {
            "location": "/#rolling-your-own-interface", 
            "text": "You can roll your own interface by either interfacing directly with the Arduino code in  main.cpp  or the python code in  treadmill.py .", 
            "title": "Rolling your own interface"
        }, 
        {
            "location": "/#links", 
            "text": "Flask    flask-socketio    flask-markdown    eventlet    Arduino    platormio    platform io serial port monitor    AccelStepper    Rotary Encoder", 
            "title": "Links"
        }, 
        {
            "location": "/#development", 
            "text": "", 
            "title": "Development"
        }, 
        {
            "location": "/#mkdocs", 
            "text": "This documentation is written in markdown and a static site is generated with  mkDocs  using the  Cinder  theme. Previously I have used Jekyll which is amazing. Going with mkDocs to see if a simple site is acceptable.  When writing markdown, serve a mkDocs site locally with  cd docs/\nmkdocs serve --dev-addr=0.0.0.0:8000 # serves built site on LAN IP\nmkdocs serve # serves built site on localhost at 127.0.0.1:8000\n\nmkdocs build #generates the site into docs/site/  Deploy to github gh-pages by follow for  deployment instructions .  mkdocs gh-deploy  will use the gh-pages branch of repository specified in  mkdocs.yml  # this will deploy to github gh-pages specified in mkdocs.yml\ncd docs #should have mkdocs.yml file\nmkdocs gh-deploy --clean \n\n#site is then available at\nhttp://cudmore.github.io/treadmill", 
            "title": "mkDocs"
        }, 
        {
            "location": "/about/", 
            "text": "treadmill was created by \nRobert H Cudmore\n.", 
            "title": "about"
        }
    ]
}